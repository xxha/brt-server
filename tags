!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADD_DEFUALT_GW	route.c	16;"	d	file:
ADD_HOST_ROUTE	route.c	13;"	d	file:
ADD_HOST_ROUTE_NP	route.c	14;"	d	file:
ARGSUSED	pcap-dos.h	68;"	d
AUTHOR	Makefile	/^AUTHOR=\\"VEEX\\"$/;"	m
BIND_FAIL_RCV_MESSAGE	bindrt.h	/^	BIND_FAIL_RCV_MESSAGE,$/;"	e	enum:__anon1
BIND_FAIL_SND_MESSAGE	bindrt.h	/^	BIND_FAIL_SND_MESSAGE,$/;"	e	enum:__anon1
BIND_FAIL_TO_BIND_ROUTE	bindrt.h	/^	BIND_FAIL_TO_BIND_ROUTE$/;"	e	enum:__anon1
BIND_FAIL_TO_GET_KEY	bindrt.h	/^	BIND_FAIL_TO_GET_KEY,$/;"	e	enum:__anon1
BIND_FAIL_TO_GET_MSG_ID	bindrt.h	/^	BIND_FAIL_TO_GET_MSG_ID,$/;"	e	enum:__anon1
BIND_KEY_FILE_NOT_EXIST	bindrt.h	/^	BIND_KEY_FILE_NOT_EXIST,$/;"	e	enum:__anon1
BIND_RET_INFO	bindrt.h	/^}BIND_RET_INFO;$/;"	t	typeref:struct:__anon2
BIND_ROUTE_MSG_INFO_BODY	msgque.h	/^}BIND_ROUTE_MSG_INFO_BODY;$/;"	t	typeref:struct:__anon12
BIND_ROUTE_ON	bindrt.h	7;"	d
BIND_RT_REVALUE	bindrt.h	/^}BIND_RT_REVALUE;$/;"	t	typeref:enum:__anon1
BIND_SUCCESS	bindrt.h	/^	BIND_SUCCESS=0,$/;"	e	enum:__anon1
BOOL	pcap-dos.h	/^typedef int            BOOL;$/;"	t
BPF_A	pcap-bpf.h	657;"	d
BPF_ABS	pcap-bpf.h	629;"	d
BPF_ADD	pcap-bpf.h	637;"	d
BPF_ALIGNMENT	pcap-bpf.h	76;"	d
BPF_ALIGNMENT	pcap-bpf.h	78;"	d
BPF_ALU	pcap-bpf.h	617;"	d
BPF_AND	pcap-bpf.h	642;"	d
BPF_B	pcap-bpf.h	626;"	d
BPF_CLASS	pcap-bpf.h	612;"	d
BPF_DIV	pcap-bpf.h	640;"	d
BPF_H	pcap-bpf.h	625;"	d
BPF_IMM	pcap-bpf.h	628;"	d
BPF_IND	pcap-bpf.h	630;"	d
BPF_JA	pcap-bpf.h	646;"	d
BPF_JEQ	pcap-bpf.h	647;"	d
BPF_JGE	pcap-bpf.h	649;"	d
BPF_JGT	pcap-bpf.h	648;"	d
BPF_JMP	pcap-bpf.h	618;"	d
BPF_JSET	pcap-bpf.h	650;"	d
BPF_JUMP	pcap-bpf.h	678;"	d
BPF_K	pcap-bpf.h	652;"	d
BPF_LD	pcap-bpf.h	613;"	d
BPF_LDX	pcap-bpf.h	614;"	d
BPF_LEN	pcap-bpf.h	632;"	d
BPF_LSH	pcap-bpf.h	643;"	d
BPF_MAJOR_VERSION	pcap-bpf.h	110;"	d
BPF_MAXBUFSIZE	pcap-bpf.h	83;"	d
BPF_MAXINSNS	pcap-bpf.h	82;"	d
BPF_MEM	pcap-bpf.h	631;"	d
BPF_MEMWORDS	pcap-bpf.h	691;"	d
BPF_MINBUFSIZE	pcap-bpf.h	84;"	d
BPF_MINOR_VERSION	pcap-bpf.h	111;"	d
BPF_MISC	pcap-bpf.h	620;"	d
BPF_MISCOP	pcap-bpf.h	660;"	d
BPF_MODE	pcap-bpf.h	627;"	d
BPF_MSH	pcap-bpf.h	633;"	d
BPF_MUL	pcap-bpf.h	639;"	d
BPF_NEG	pcap-bpf.h	645;"	d
BPF_OP	pcap-bpf.h	636;"	d
BPF_OR	pcap-bpf.h	641;"	d
BPF_RELEASE	pcap-bpf.h	61;"	d
BPF_RET	pcap-bpf.h	619;"	d
BPF_RSH	pcap-bpf.h	644;"	d
BPF_RVAL	pcap-bpf.h	656;"	d
BPF_SIZE	pcap-bpf.h	623;"	d
BPF_SRC	pcap-bpf.h	651;"	d
BPF_ST	pcap-bpf.h	615;"	d
BPF_STMT	pcap-bpf.h	677;"	d
BPF_STX	pcap-bpf.h	616;"	d
BPF_SUB	pcap-bpf.h	638;"	d
BPF_TAX	pcap-bpf.h	661;"	d
BPF_TXA	pcap-bpf.h	662;"	d
BPF_W	pcap-bpf.h	624;"	d
BPF_WORDALIGN	pcap-bpf.h	80;"	d
BPF_X	pcap-bpf.h	653;"	d
BRT_SERVER_EXIT_VALUE	pub.h	/^}BRT_SERVER_EXIT_VALUE;$/;"	t	typeref:enum:__anon11
BUFFER	msgque.h	7;"	d
BYTE	pcap-dos.h	/^typedef unsigned char  BYTE;$/;"	t
CC	Makefile	/^CC=arm-none-linux-gnueabi-gcc$/;"	m
CFLAG	Makefile	/^CFLAG=-I\/home\/xxha\/tools\/pcap\/arm_lib\/include -DDROUTE -c$/;"	m
CMD_BUFFER_SIZE	droute.c	15;"	d	file:
CMD_EXIT	main.h	/^	CMD_EXIT,$/;"	e	enum:__anon18
CMD_INFO	main.h	/^}CMD_INFO;$/;"	t	typeref:enum:__anon18
CMD_RUN	main.h	/^	CMD_RUN,$/;"	e	enum:__anon18
DEL_DEFUALT_GW	route.c	17;"	d	file:
DEV_COUNTS	main.c	/^int DEV_COUNTS=sizeof(dev_socket)\/sizeof(SOCKET_INFO);$/;"	v
DEV_MAP_FAIL_RCV_MESSAGE	bindrt.h	/^	DEV_MAP_FAIL_RCV_MESSAGE,$/;"	e	enum:__anon3
DEV_MAP_FAIL_SND_MESSAGE	bindrt.h	/^	DEV_MAP_FAIL_SND_MESSAGE,$/;"	e	enum:__anon3
DEV_MAP_FAIL_TO_GET_KEY	bindrt.h	/^	DEV_MAP_FAIL_TO_GET_KEY,$/;"	e	enum:__anon3
DEV_MAP_FAIL_TO_GET_MSG_ID	bindrt.h	/^	DEV_MAP_FAIL_TO_GET_MSG_ID,$/;"	e	enum:__anon3
DEV_MAP_FAIL_TO_MAP_NET_DEV	bindrt.h	/^	DEV_MAP_FAIL_TO_MAP_NET_DEV,$/;"	e	enum:__anon3
DEV_MAP_KEY_FILE_NOT_EXIST	bindrt.h	/^	DEV_MAP_KEY_FILE_NOT_EXIST,$/;"	e	enum:__anon3
DEV_MAP_NODE	msgque.h	/^}DEV_MAP_NODE;$/;"	t	typeref:struct:__anon13
DEV_MAP_SUCCESS	bindrt.h	/^	DEV_MAP_SUCCESS=0,$/;"	e	enum:__anon3
DEV_NAME_LEN	droute.c	17;"	d	file:
DEV_NAME_MAP	scan_dev_name.h	/^}DEV_NAME_MAP;$/;"	t	typeref:struct:__anon10
DEV_NAME_MAX_SIZE	scan_dev_name.h	3;"	d
DEV_NET_INFO	bindrt.h	/^}DEV_NET_INFO;$/;"	t	typeref:struct:__anon8
DEV_PROC_FILE_NAME	scan_dev_name.c	25;"	d	file:
DJGPP	pcap-dos.h	35;"	d
DLT_AIRONET_HEADER	pcap-bpf.h	322;"	d
DLT_APPLE_IP_OVER_IEEE1394	pcap-bpf.h	423;"	d
DLT_ARCNET	pcap-bpf.h	136;"	d
DLT_ARCNET_LINUX	pcap-bpf.h	391;"	d
DLT_ATM_CLIP	pcap-bpf.h	180;"	d
DLT_ATM_RFC1483	pcap-bpf.h	150;"	d
DLT_AURORA	pcap-bpf.h	361;"	d
DLT_AX25	pcap-bpf.h	132;"	d
DLT_BACNET_MS_TP	pcap-bpf.h	527;"	d
DLT_CHAOS	pcap-bpf.h	134;"	d
DLT_CHDLC	pcap-bpf.h	226;"	d
DLT_CISCO_IOS	pcap-bpf.h	309;"	d
DLT_C_HDLC	pcap-bpf.h	225;"	d
DLT_DOCSIS	pcap-bpf.h	437;"	d
DLT_ECONET	pcap-bpf.h	287;"	d
DLT_EN10MB	pcap-bpf.h	130;"	d
DLT_EN3MB	pcap-bpf.h	131;"	d
DLT_ENC	pcap-bpf.h	262;"	d
DLT_ENC	pcap-bpf.h	264;"	d
DLT_ERF_ETH	pcap-bpf.h	585;"	d
DLT_ERF_POS	pcap-bpf.h	586;"	d
DLT_FDDI	pcap-bpf.h	139;"	d
DLT_FRELAY	pcap-bpf.h	243;"	d
DLT_GCOM_SERIAL	pcap-bpf.h	570;"	d
DLT_GCOM_T1E1	pcap-bpf.h	569;"	d
DLT_GPF_F	pcap-bpf.h	563;"	d
DLT_GPF_T	pcap-bpf.h	562;"	d
DLT_GPRS_LLC	pcap-bpf.h	561;"	d
DLT_HHDLC	pcap-bpf.h	327;"	d
DLT_IBM_SN	pcap-bpf.h	460;"	d
DLT_IBM_SP	pcap-bpf.h	459;"	d
DLT_IEEE802	pcap-bpf.h	135;"	d
DLT_IEEE802_11	pcap-bpf.h	228;"	d
DLT_IEEE802_11_RADIO	pcap-bpf.h	368;"	d
DLT_IEEE802_11_RADIO_AVS	pcap-bpf.h	514;"	d
DLT_IPFILTER	pcap-bpf.h	292;"	d
DLT_IP_OVER_FC	pcap-bpf.h	337;"	d
DLT_JUNIPER_ATM1	pcap-bpf.h	406;"	d
DLT_JUNIPER_ATM2	pcap-bpf.h	404;"	d
DLT_JUNIPER_CHDLC	pcap-bpf.h	606;"	d
DLT_JUNIPER_ES	pcap-bpf.h	401;"	d
DLT_JUNIPER_ETHER	pcap-bpf.h	603;"	d
DLT_JUNIPER_FRELAY	pcap-bpf.h	605;"	d
DLT_JUNIPER_GGSN	pcap-bpf.h	402;"	d
DLT_JUNIPER_MFR	pcap-bpf.h	403;"	d
DLT_JUNIPER_MLFR	pcap-bpf.h	400;"	d
DLT_JUNIPER_MLPPP	pcap-bpf.h	399;"	d
DLT_JUNIPER_MONITOR	pcap-bpf.h	522;"	d
DLT_JUNIPER_PIC_PEER	pcap-bpf.h	577;"	d
DLT_JUNIPER_PPP	pcap-bpf.h	604;"	d
DLT_JUNIPER_PPPOE	pcap-bpf.h	558;"	d
DLT_JUNIPER_PPPOE_ATM	pcap-bpf.h	559;"	d
DLT_JUNIPER_SERVICES	pcap-bpf.h	405;"	d
DLT_LINUX_IRDA	pcap-bpf.h	454;"	d
DLT_LINUX_LAPD	pcap-bpf.h	594;"	d
DLT_LINUX_PPP_WITHDIRECTION	pcap-bpf.h	550;"	d
DLT_LINUX_SLL	pcap-bpf.h	277;"	d
DLT_LOOP	pcap-bpf.h	254;"	d
DLT_LTALK	pcap-bpf.h	282;"	d
DLT_MTP2	pcap-bpf.h	430;"	d
DLT_MTP2_WITH_PHDR	pcap-bpf.h	429;"	d
DLT_MTP3	pcap-bpf.h	431;"	d
DLT_NULL	pcap-bpf.h	129;"	d
DLT_OLD_PFLOG	pcap-bpf.h	301;"	d
DLT_PCI_EXP	pcap-bpf.h	360;"	d
DLT_PFLOG	pcap-bpf.h	304;"	d
DLT_PFSYNC	pcap-bpf.h	302;"	d
DLT_PPP	pcap-bpf.h	138;"	d
DLT_PPP_BSDOS	pcap-bpf.h	167;"	d
DLT_PPP_BSDOS	pcap-bpf.h	171;"	d
DLT_PPP_ETHER	pcap-bpf.h	194;"	d
DLT_PPP_PPPD	pcap-bpf.h	543;"	d
DLT_PPP_SERIAL	pcap-bpf.h	193;"	d
DLT_PPP_WITH_DIRECTION	pcap-bpf.h	549;"	d
DLT_PRISM_HEADER	pcap-bpf.h	316;"	d
DLT_PRONET	pcap-bpf.h	133;"	d
DLT_RAW	pcap-bpf.h	153;"	d
DLT_RAW	pcap-bpf.h	155;"	d
DLT_REDBACK_SMARTEDGE	pcap-bpf.h	186;"	d
DLT_RIO	pcap-bpf.h	359;"	d
DLT_SCCP	pcap-bpf.h	432;"	d
DLT_SLIP	pcap-bpf.h	137;"	d
DLT_SLIP_BSDOS	pcap-bpf.h	166;"	d
DLT_SLIP_BSDOS	pcap-bpf.h	170;"	d
DLT_SUNATM	pcap-bpf.h	353;"	d
DLT_SYMANTEC_FIREWALL	pcap-bpf.h	203;"	d
DLT_TZSP	pcap-bpf.h	378;"	d
DLT_USER0	pcap-bpf.h	487;"	d
DLT_USER1	pcap-bpf.h	488;"	d
DLT_USER10	pcap-bpf.h	497;"	d
DLT_USER11	pcap-bpf.h	498;"	d
DLT_USER12	pcap-bpf.h	499;"	d
DLT_USER13	pcap-bpf.h	500;"	d
DLT_USER14	pcap-bpf.h	501;"	d
DLT_USER15	pcap-bpf.h	502;"	d
DLT_USER2	pcap-bpf.h	489;"	d
DLT_USER3	pcap-bpf.h	490;"	d
DLT_USER4	pcap-bpf.h	491;"	d
DLT_USER5	pcap-bpf.h	492;"	d
DLT_USER6	pcap-bpf.h	493;"	d
DLT_USER7	pcap-bpf.h	494;"	d
DLT_USER8	pcap-bpf.h	495;"	d
DLT_USER9	pcap-bpf.h	496;"	d
DOS4GW	pcap-dos.h	36;"	d
DOSX	pcap-dos.h	39;"	d
DOSX	pcap-dos.h	40;"	d
DOSX	pcap-dos.h	44;"	d
DOSX	pcap-dos.h	45;"	d
DOSX	pcap-dos.h	50;"	d
DOSX	pcap-dos.h	51;"	d
DOSX	pcap-dos.h	71;"	d
DWORD	pcap-dos.h	/^typedef unsigned long  DWORD;$/;"	t
EMPTY_GW	route.h	4;"	d
ERR_ALLOC_MEM	main.h	/^	ERR_ALLOC_MEM,$/;"	e	enum:ERR_VALUE
ERR_BIND_DEVICE	main.h	/^	ERR_BIND_DEVICE,$/;"	e	enum:ERR_VALUE
ERR_CREATE_SOCKET	main.h	/^	ERR_CREATE_SOCKET,$/;"	e	enum:ERR_VALUE
ERR_CREATE_THREAD	main.h	/^	ERR_CREATE_THREAD,$/;"	e	enum:ERR_VALUE
ERR_CREATE_THREAD_IPC	main.h	/^	ERR_CREATE_THREAD_IPC,$/;"	e	enum:ERR_VALUE
ERR_GET_DEV_INDEX	main.h	/^	ERR_GET_DEV_INDEX,$/;"	e	enum:ERR_VALUE
ERR_GET_DEV_IP	main.h	/^	ERR_GET_DEV_IP,$/;"	e	enum:ERR_VALUE
ERR_INIT_THREAD_ATTR	main.h	/^	ERR_INIT_THREAD_ATTR,$/;"	e	enum:ERR_VALUE
ERR_NO_PARA	main.h	/^	ERR_NO_PARA,$/;"	e	enum:ERR_VALUE
ERR_RCV_SOCK_DATA	main.h	/^	ERR_RCV_SOCK_DATA,$/;"	e	enum:ERR_VALUE
ERR_VALUE	main.h	/^enum ERR_VALUE {$/;"	g
ETHER	pcap-dos.h	/^typedef BYTE           ETHER[6];$/;"	t
ETHER_ADDR_LEN	droute.c	20;"	d	file:
ETHER_PROTO_OFF	main.h	6;"	d
ETH_ALEN	pcap-dos.h	23;"	d
ETH_ARP	pub.h	6;"	d
ETH_DST_MAC	ip.c	6;"	d	file:
ETH_HLEN	pcap-dos.h	24;"	d
ETH_IP	pub.h	4;"	d
ETH_MAX	pcap-dos.h	27;"	d
ETH_MIN	pcap-dos.h	26;"	d
ETH_MTU	pcap-dos.h	25;"	d
EXCEPT_DST_ADR	route.c	18;"	d	file:
FAIL_ILLEGAL_PARA_FOR_THREAD	pub.h	/^	FAIL_ILLEGAL_PARA_FOR_THREAD,$/;"	e	enum:__anon11
FAIL_TO_CREATE_UNIQ_QUE_FILE	pub.h	/^	FAIL_TO_CREATE_UNIQ_QUE_FILE,$/;"	e	enum:__anon11
FAIL_TO_DEL_UNIQ_QUE_FILE	pub.h	/^	FAIL_TO_DEL_UNIQ_QUE_FILE,$/;"	e	enum:__anon11
FAIL_TO_OPEN_ROUTE_FILE	pub.h	/^	FAIL_TO_OPEN_ROUTE_FILE=0,$/;"	e	enum:__anon11
FALSE	pcap-dos.h	31;"	d
FLUSH_ROUTE_CACHE	ipc_monitor.c	13;"	d	file:
FLUSH_ROUTE_CACHE	route.c	19;"	d	file:
HIDE_CMD_INFO	route.c	20;"	d	file:
IPC_MONITOR_INFO	main.h	/^}IPC_MONITOR_INFO;$/;"	t	typeref:struct:__anon22
IP_DF	droute.c	40;"	d	file:
IP_HL	droute.c	48;"	d	file:
IP_MF	droute.c	41;"	d	file:
IP_OFFMASK	droute.c	42;"	d	file:
IP_RF	droute.c	39;"	d	file:
IP_SIZE	droute.c	14;"	d	file:
IP_V	droute.c	49;"	d	file:
KEY_FILE_NAME	msgque.h	11;"	d
LFLAG	Makefile	/^LFLAG=-L\/home\/xxha\/tools\/pcap\/arm_lib\/lib -lpcap -lpthread$/;"	m
LOCKED_FUNC	pcap-dos.h	140;"	d
LOCKED_VAR	pcap-dos.h	139;"	d
MANAGE_PORT	pub.h	5;"	d
MAXBYTES2CAPTURE	droute.c	12;"	d	file:
MAX_CMD_NAME_LEN	main.h	39;"	d
MAX_DEV_NAMES	main.h	4;"	d
MAX_DEV_NAME_LEN	msgque.h	8;"	d
MAX_DEV_ORG_COUNTS	scan_dev_name.h	4;"	d
MAX_ETH_NAME_LEN	main.h	38;"	d
MAX_FRAME_SIZE	main.h	5;"	d
MAX_TXT_BUFFER_LEN	msgque.h	9;"	d
MAYBE_SWAPPED	pcap-int.h	/^	MAYBE_SWAPPED$/;"	e	enum:__anon16
MODE_CAPT	pcap.h	289;"	d
MODE_MON	pcap.h	291;"	d
MODE_STAT	pcap.h	290;"	d
MSG_TYPE	msgque.h	/^enum MSG_TYPE{$/;"	g
Metric	route.c	/^	unsigned char Metric;$/;"	m	struct:__anon15	file:
NETDEV_COUNTS	droute.c	22;"	d	file:
NET_DEV_INFO_RET_INFO	bindrt.h	/^}NET_DEV_INFO_RET_INFO;$/;"	t	typeref:struct:__anon6
NET_DEV_INFO_RE_VALUE	bindrt.h	/^}NET_DEV_INFO_RE_VALUE;$/;"	t	typeref:enum:__anon5
NET_DEV_NAME_MAP_MSG_INFO_BODY	msgque.h	/^}NET_DEV_NAME_MAP_MSG_INFO_BODY;$/;"	t	typeref:struct:__anon14
NET_DEV_NAME_MAP_NODE	bindrt.h	/^}NET_DEV_NAME_MAP_NODE;$/;"	t	typeref:struct:__anon7
NET_DEV_NAME_RET_INFO	bindrt.h	/^}NET_DEV_NAME_RET_INFO;$/;"	t	typeref:struct:__anon4
NET_DEV_NAME_RE_VALUE	bindrt.h	/^}NET_DEV_NAME_RE_VALUE;$/;"	t	typeref:enum:__anon3
NET_STATS	pcap-dos.h	/^        } NET_STATS;$/;"	t	typeref:struct:net_device_stats
NOT_SWAPPED	pcap-int.h	/^	NOT_SWAPPED,$/;"	e	enum:__anon16
OBJ	Makefile	/^OBJ=main.o route.o ipc_monitor.o droute.o$/;"	m
OrigMissed	pcap-int.h	/^	long	OrigMissed;	\/* missed by i\/f before this run *\/$/;"	m	struct:pcap_md
PCAP_ASSERT	pcap-dos.h	216;"	d
PCAP_ASSERT	pcap-dos.h	221;"	d
PCAP_D_IN	pcap.h	/^       PCAP_D_IN,$/;"	e	enum:__anon9
PCAP_D_INOUT	pcap.h	/^       PCAP_D_INOUT = 0,$/;"	e	enum:__anon9
PCAP_D_OUT	pcap.h	/^       PCAP_D_OUT$/;"	e	enum:__anon9
PCAP_ERRBUF_SIZE	pcap.h	63;"	d
PCAP_ETHERS_FILE	pcap-namedb.h	55;"	d
PCAP_FDDIPAD	pcap-int.h	116;"	d
PCAP_IF_LOOPBACK	pcap.h	196;"	d
PCAP_VERSION_MAJOR	pcap.h	60;"	d
PCAP_VERSION_MINOR	pcap.h	61;"	d
PERM	msgque.h	10;"	d
PHARLAP	pcap-dos.h	34;"	d
PROC_FILE_NAME_HEAD	main.h	8;"	d
PROC_FILE_NAME_TAIL	main.h	9;"	d
PROTO_OPS	main.h	/^}PROTO_OPS;$/;"	t	typeref:struct:__anon21
PROTO_TYPE_II	packet_monitor.h	/^}PROTO_TYPE_II;$/;"	t	typeref:struct:__anon17
PROTO_UNDEF	pcap-namedb.h	78;"	d
Packet	pcap-int.h	/^	LPPACKET Packet;$/;"	m	struct:pcap
QWORD	pcap-dos.h	/^  typedef unsigned __int64  QWORD;$/;"	t
QWORD	pcap-dos.h	/^  typedef unsigned long long  QWORD;$/;"	t
RCV_IP_OFF	arp.c	4;"	d	file:
RCV_IP_OFF	ip.c	4;"	d	file:
RECEIVE_BUF_SIZE	pcap-dos.h	106;"	d
RECEIVE_QUEUE_SIZE	pcap-dos.h	102;"	d
REMOVE_HOST_ROUTE	route.c	15;"	d	file:
ROUTE_BUF_SIZE	route.c	11;"	d	file:
ROUTE_FILE_NAME	route.c	12;"	d	file:
ROUTE_TABLE	route.c	/^}ROUTE_TABLE;$/;"	t	typeref:struct:__anon15	file:
SEND_IP_OFF	arp.c	3;"	d	file:
SEND_IP_OFF	ip.c	3;"	d	file:
SET_DEV_NET_INFO_FAIL_RCV_MESSAGE	bindrt.h	/^	SET_DEV_NET_INFO_FAIL_RCV_MESSAGE,$/;"	e	enum:__anon5
SET_DEV_NET_INFO_FAIL_SND_MESSAGE	bindrt.h	/^	SET_DEV_NET_INFO_FAIL_SND_MESSAGE,$/;"	e	enum:__anon5
SET_DEV_NET_INFO_FAIL_TO_GET_KEY	bindrt.h	/^	SET_DEV_NET_INFO_FAIL_TO_GET_KEY,$/;"	e	enum:__anon5
SET_DEV_NET_INFO_FAIL_TO_GET_MSG_ID	bindrt.h	/^	SET_DEV_NET_INFO_FAIL_TO_GET_MSG_ID,$/;"	e	enum:__anon5
SET_DEV_NET_INFO_FAIL_TO_SET_NET_INFO	bindrt.h	/^	SET_DEV_NET_INFO_FAIL_TO_SET_NET_INFO,$/;"	e	enum:__anon5
SET_DEV_NET_INFO_KEY_FILE_NOT_EXIST	bindrt.h	/^	SET_DEV_NET_INFO_KEY_FILE_NOT_EXIST,$/;"	e	enum:__anon5
SET_DEV_NET_INFO_SUCCESS	bindrt.h	/^	SET_DEV_NET_INFO_SUCCESS=0,$/;"	e	enum:__anon5
SIZEOF_CHAR	pcap-stdinc.h	33;"	d
SIZEOF_INT	pcap-stdinc.h	35;"	d
SIZEOF_LONG_LONG	pcap-stdinc.h	37;"	d
SIZEOF_SHORT	pcap-stdinc.h	34;"	d
SIZE_ETHERNET	droute.c	19;"	d	file:
SOCKET_INFO	main.h	/^}SOCKET_INFO;$/;"	t	typeref:struct:__anon20
STATUS_DEAD	main.h	/^	STATUS_DEAD,$/;"	e	enum:__anon19
STATUS_IDEL	main.h	/^	STATUS_IDEL,$/;"	e	enum:__anon19
STATUS_INFO	main.h	/^}STATUS_INFO;$/;"	t	typeref:enum:__anon19
STATUS_RUN	main.h	/^	STATUS_RUN,$/;"	e	enum:__anon19
SWAPPED	pcap-int.h	/^	SWAPPED,$/;"	e	enum:__anon16
SYS_CTL_HEAD	main.h	10;"	d
SYS_CTL_TAIL	main.h	11;"	d
TFTP_BOOT_DIR	Makefile	/^TFTP_BOOT_DIR=\/tftpboot$/;"	m
TRUE	pcap-dos.h	30;"	d
TYPE_BIND_ROUTE	msgque.h	/^	TYPE_BIND_ROUTE=1,$/;"	e	enum:MSG_TYPE
TYPE_DEV_INFO	msgque.h	/^	TYPE_DEV_INFO=3,$/;"	e	enum:MSG_TYPE
TYPE_DEV_NAME_MAP	msgque.h	/^	TYPE_DEV_NAME_MAP=2,$/;"	e	enum:MSG_TYPE
TotAccepted	pcap-int.h	/^	u_long	TotAccepted;	\/* count accepted by filter *\/$/;"	m	struct:pcap_md
TotDrops	pcap-int.h	/^	u_long	TotDrops;	\/* count of dropped packets *\/$/;"	m	struct:pcap_md
TotMissed	pcap-int.h	/^	long	TotMissed;	\/* missed by i\/f during this run *\/$/;"	m	struct:pcap_md
TotPkts	pcap-int.h	/^	u_long	TotPkts;	\/* can't oflow for 79 hrs on ether *\/$/;"	m	struct:pcap_md
UDP_PORT_OFF	ip.c	5;"	d	file:
UINT	pcap-dos.h	/^  typedef unsigned int UINT;$/;"	t
VERSION	Makefile	/^VERSION=\\"1.1.0\\"$/;"	m
WORD	pcap-dos.h	/^typedef unsigned short WORD;$/;"	t
_U_	pcap-dos.h	91;"	d
_U_	pcap-dos.h	95;"	d
_WINSOCKAPI_	pcap-stdinc.h	46;"	d
__ARP__H	arp.h	2;"	d
__BIND_ROUTE_H	bindrt.h	3;"	d
__IPC_MONITOR_H	ipc_monitor.h	3;"	d
__IP__H	ip.h	2;"	d
__MAIN_H	main.h	2;"	d
__MSG__QUE__H	msgque.h	2;"	d
__PACKET_MONITOR_H	packet_monitor.h	2;"	d
__PCAP_DOS_H	pcap-dos.h	9;"	d
__PUB__H	pub.h	2;"	d
__ROUTE__H	route.h	2;"	d
__SCAN_DEV_NAME_H	scan_dev_name.h	2;"	d
adapter	pcap-int.h	/^	ADAPTER *adapter;$/;"	m	struct:pcap
addr	pcap-namedb.h	/^	u_char addr[6];$/;"	m	struct:pcap_etherent
addr	pcap.h	/^	struct sockaddr *addr;		\/* address *\/$/;"	m	struct:pcap_addr	typeref:struct:pcap_addr::sockaddr
addresses	pcap.h	/^	struct pcap_addr *addresses;$/;"	m	struct:pcap_if	typeref:struct:pcap_if::pcap_addr
alias	main.h	/^	unsigned char alias[MAX_ETH_NAME_LEN];	$/;"	m	struct:__anon20
base	pcap-int.h	/^	u_char *base;$/;"	m	struct:pcap_sf
base_addr	pcap-dos.h	/^         DWORD  base_addr;      \/* device I\/O address       *\/$/;"	m	struct:device
bf_insns	pcap-bpf.h	/^	struct bpf_insn *bf_insns;$/;"	m	struct:bpf_program	typeref:struct:bpf_program::bpf_insn
bf_len	pcap-bpf.h	/^	u_int bf_len;$/;"	m	struct:bpf_program
bindRtInfo	bindrt.c	/^BIND_RET_INFO bindRtInfo[]={$/;"	v
bind_route	bindrt-test.c	/^int bind_route(unsigned char *argv[]){$/;"	f
bind_socket_to_devname	packet_monitor.c	/^int bind_socket_to_devname(SOCKET_INFO *sockInfo){$/;"	f
bp	pcap-int.h	/^	u_char *bp;$/;"	m	struct:pcap
bpf_insn	pcap-bpf.h	/^struct bpf_insn {$/;"	s
bpf_int32	pcap-bpf.h	/^typedef	int bpf_int32;$/;"	t
bpf_int32	pcap-bpf.h	/^typedef long          bpf_int32;$/;"	t
bpf_int32	pcap.h	/^typedef	int bpf_int32;$/;"	t
bpf_program	pcap-bpf.h	/^struct bpf_program {$/;"	s
bpf_u_int32	pcap-bpf.h	/^typedef	u_int bpf_u_int32;$/;"	t
bpf_u_int32	pcap-bpf.h	/^typedef unsigned long bpf_u_int32;$/;"	t
bpf_u_int32	pcap.h	/^typedef	u_int bpf_u_int32;$/;"	t
bpf_version	pcap-bpf.h	/^struct bpf_version {$/;"	s
break_loop	pcap-int.h	/^	int break_loop;		\/* flag set to force break from packet-reading loop *\/$/;"	m	struct:pcap
broadaddr	pcap.h	/^	struct sockaddr *broadaddr;	\/* broadcast address for that address *\/$/;"	m	struct:pcap_addr	typeref:struct:pcap_addr::sockaddr
broadcast	route.c	/^static int broadcast(unsigned char *dst_addr,unsigned char *net_mask,unsigned char *gw,unsigned char *dev_name){$/;"	f	file:
bs_capt	pcap.h	/^	u_int bs_capt;		\/* number of packets that reach the application *\/$/;"	m	struct:pcap_stat
buf	msgque.h	/^	char buf[512];$/;"	m	struct:msgtype
buf	test.c	/^unsigned char buf[2048];$/;"	v
buf	tmp/server.c	/^unsigned buf[10240];$/;"	v
buf_start	pcap-dos.h	/^         char        *buf_start;  \/* start of buffer pool *\/$/;"	m	struct:rx_ringbuf
buffer	pcap-int.h	/^	u_char *buffer;$/;"	m	struct:pcap
bufsize	pcap-int.h	/^	int bufsize;$/;"	m	struct:pcap
bv_major	pcap-bpf.h	/^	u_short bv_major;$/;"	m	struct:bpf_version
bv_minor	pcap-bpf.h	/^	u_short bv_minor;$/;"	m	struct:bpf_version
caddr_t	pcap-stdinc.h	60;"	d
caplen	pcap-int.h	/^    bpf_u_int32 caplen;		\/* length of portion present *\/$/;"	m	struct:pcap_sf_patched_pkthdr
caplen	pcap-int.h	/^    bpf_u_int32 caplen;		\/* length of portion present *\/$/;"	m	struct:pcap_sf_pkthdr
caplen	pcap.h	/^	bpf_u_int32 caplen;	\/* length of portion present *\/$/;"	m	struct:pcap_pkthdr
cc	pcap-int.h	/^	int cc;$/;"	m	struct:pcap
clear_promisc	pcap-int.h	/^	int	clear_promisc;	\/* must clear promiscuous mode when we close *\/$/;"	m	struct:pcap_md
close	pcap-dos.h	/^         void  (*close)(struct device *dev);$/;"	m	struct:device
close_op	pcap-int.h	/^	void	(*close_op)(pcap_t *);$/;"	m	struct:pcap
close_route_file	route.c	/^void close_route_file()$/;"	f
cmd	main.h	/^	volatile CMD_INFO cmd;$/;"	m	struct:__anon20
cmd	main.h	/^	volatile CMD_INFO cmd;$/;"	m	struct:__anon22
code	pcap-bpf.h	/^	u_short	code;$/;"	m	struct:bpf_insn
collisions	pcap.h	/^       u_long  collisions;$/;"	m	struct:pcap_stat_ex
cooked	pcap-int.h	/^	int	cooked;		\/* using SOCK_DGRAM rather than SOCK_RAW *\/$/;"	m	struct:pcap_md
copy_rx_buf	pcap-dos.h	/^         int   (*copy_rx_buf) (BYTE *buf, int max); \/* rx-copy (pktdrvr only) *\/$/;"	m	struct:device
counts	msgque.h	/^	unsigned char counts[MAX_TXT_BUFFER_LEN];$/;"	m	struct:__anon14
create_pcap	droute.c	/^int create_pcap(SOCKET_INFO *sockPtr)$/;"	f
dag_fcs_bits	pcap-int.h	/^	int	dag_fcs_bits;	\/* Number of checksum bits from link layer *\/$/;"	m	struct:pcap_md
dag_mem_base	pcap-int.h	/^	void	*dag_mem_base;	\/* DAG card memory base address *\/$/;"	m	struct:pcap_md
dag_mem_bottom	pcap-int.h	/^	u_char	*dag_mem_bottom;	\/* DAG card current memory bottom pointer *\/$/;"	m	struct:pcap_md
dag_mem_bottom	pcap-int.h	/^	u_int	dag_mem_bottom;	\/* DAG card current memory bottom offset *\/$/;"	m	struct:pcap_md
dag_mem_top	pcap-int.h	/^	u_char	*dag_mem_top;	\/* DAG card current memory top pointer *\/$/;"	m	struct:pcap_md
dag_mem_top	pcap-int.h	/^	u_int	dag_mem_top;	\/* DAG card current memory top offset *\/$/;"	m	struct:pcap_md
dag_offset_flags	pcap-int.h	/^	int	dag_offset_flags; \/* Flags to pass to dag_offset(). *\/$/;"	m	struct:pcap_md
dag_stream	pcap-int.h	/^	int	dag_stream;	\/* DAG stream number *\/$/;"	m	struct:pcap_md
dag_timeout	pcap-int.h	/^	int	dag_timeout;	\/* timeout specified to pcap_open_live.$/;"	m	struct:pcap_md
data	pcap-dos.h	/^         BYTE  data[ETH_MAX+10];  \/* add some margin. data[0] should be *\/$/;"	m	struct:rx_elem
description	pcap.h	/^	char *description;	\/* textual description of interface, or NULL *\/$/;"	m	struct:pcap_if
devNameMap	scan_dev_name.c	/^static DEV_NAME_MAP devNameMap[MAX_DEV_ORG_COUNTS]={$/;"	v	file:
devNetInfo	bindrt.c	/^NET_DEV_INFO_RET_INFO devNetInfo[]={$/;"	v
dev_cur_name	scan_dev_name.h	/^	unsigned char dev_cur_name[DEV_NAME_MAX_SIZE];$/;"	m	struct:__anon10
dev_name	bindrt.h	/^	unsigned char dev_name[32];$/;"	m	struct:__anon8
dev_name	msgque.h	/^	unsigned char dev_name[MAX_DEV_NAME_LEN];$/;"	m	struct:__anon12
dev_new_name	scan_dev_name.h	/^	unsigned char dev_new_name[DEV_NAME_MAX_SIZE];$/;"	m	struct:__anon10
dev_org_name	scan_dev_name.h	/^	unsigned char dev_org_name[DEV_NAME_MAX_SIZE];$/;"	m	struct:__anon10
dev_socket	main.c	/^SOCKET_INFO dev_socket[MAX_DEV_NAMES]={$/;"	v
device	pcap-dos.h	/^  struct device {$/;"	s
device	pcap-int.h	/^	char	*device;	\/* device name *\/$/;"	m	struct:pcap_md
direction	pcap-int.h	/^	pcap_direction_t direction;$/;"	m	struct:pcap
discovery_udp_port	ip.c	/^unsigned char discovery_udp_port[]={0x80,0x18};$/;"	v
dlt_count	pcap-int.h	/^	int dlt_count;$/;"	m	struct:pcap
dlt_list	pcap-int.h	/^	u_int *dlt_list;$/;"	m	struct:pcap
dma	pcap-dos.h	/^         int    dma;            \/* DMA channel              *\/$/;"	m	struct:device
dot_ip	route.c	/^	unsigned char dot_ip[18];$/;"	m	struct:__anon15	file:
droute_process	droute.c	/^void *droute_process(void *para)$/;"	f
dstaddr	pcap.h	/^	struct sockaddr *dstaddr;	\/* P2P destination address for that address *\/$/;"	m	struct:pcap_addr	typeref:struct:pcap_addr::sockaddr
elem_size	pcap-dos.h	/^         int          elem_size;  \/* size of each element *\/$/;"	m	struct:rx_ringbuf
errInfo	bindrt.h	/^	unsigned char errInfo[128];$/;"	m	struct:__anon2
errInfo	bindrt.h	/^	unsigned char errInfo[128];$/;"	m	struct:__anon4
errInfo	bindrt.h	/^	unsigned char errInfo[128];$/;"	m	struct:__anon6
errbuf	pcap-int.h	/^	char errbuf[PCAP_ERRBUF_SIZE + 1];$/;"	m	struct:pcap
eth_name	route.c	/^	unsigned char eth_name[16];$/;"	m	struct:__anon15	file:
ether_dhost	droute.c	/^        u_char  ether_dhost[ETHER_ADDR_LEN];    \/* destination host address *\/$/;"	m	struct:sniff_ethernet	file:
ether_shost	droute.c	/^        u_char  ether_shost[ETHER_ADDR_LEN];    \/* source host address *\/$/;"	m	struct:sniff_ethernet	file:
ether_type	droute.c	/^        u_short ether_type;                     \/* IP? ARP? RARP? etc *\/$/;"	m	struct:sniff_ethernet	file:
fcode	pcap-int.h	/^	struct bpf_program fcode;$/;"	m	struct:pcap	typeref:struct:pcap::bpf_program
fddipad	pcap-int.h	/^	int fddipad;$/;"	m	struct:pcap
findip	droute.c	/^int findip(char * dev, char * ipaddr,unsigned int *ip32,unsigned *netmask32)$/;"	f
flags	pcap-dos.h	/^         WORD   flags;          \/* Low-level status flags. *\/$/;"	m	struct:device
flags	pcap.h	/^	bpf_u_int32 flags;	\/* PCAP_IF_ interface flags *\/$/;"	m	struct:pcap_if
flags	route.c	/^	unsigned char flags;$/;"	m	struct:__anon15	file:
g_netadd	droute.c	/^unsigned int g_netadd[NETDEV_COUNTS];$/;"	v
gateway	bindrt.h	/^	unsigned char gateway[32];$/;"	m	struct:__anon8
gateway	main.h	/^	unsigned char gateway[32];$/;"	m	struct:__anon20
get_dev_mac_address	packet_monitor.c	/^int get_dev_mac_address(SOCKET_INFO *sockInfo){$/;"	f
get_dev_mask	packet_monitor.c	/^int get_dev_mask(SOCKET_INFO *sockInfo){$/;"	f
get_rx_buf	pcap-dos.h	/^         BYTE *(*get_rx_buf) (int len);             \/* rx-buf fetch\/enqueue *\/$/;"	m	struct:device
get_stats	pcap-dos.h	/^         void *(*get_stats)(struct device *dev);$/;"	m	struct:device
gethostdev	droute.c	/^int gethostdev(char * hostip, char * dev)$/;"	f
getnonblock_op	pcap-int.h	/^	int	(*getnonblock_op)(pcap_t *, char *);$/;"	m	struct:pcap
gw	msgque.h	/^	unsigned char gw[MAX_TXT_BUFFER_LEN];$/;"	m	struct:__anon12
gw	route.c	/^	unsigned char gw[18];$/;"	m	struct:__anon15	file:
hdrsize	pcap-int.h	/^	int hdrsize;$/;"	m	struct:pcap_sf
hiByte	main.h	/^	unsigned char hiByte;$/;"	m	struct:__anon21
hiByte	packet_monitor.h	/^	unsigned char hiByte;$/;"	m	struct:__anon17
ifindex	pcap-int.h	/^	int	ifindex;	\/* interface index of device we're bound to *\/$/;"	m	struct:pcap_md
in_index	pcap-dos.h	/^         volatile int in_index;   \/* queue index head *\/$/;"	m	struct:rx_ringbuf
index	main.h	/^	int index;$/;"	m	struct:__anon20
index	pcap-int.h	/^    int		index;$/;"	m	struct:pcap_sf_patched_pkthdr
init_msg_que	bindrt.c	/^static volatile init_msg_que=0;$/;"	v	file:
inject_op	pcap-int.h	/^	int	(*inject_op)(pcap_t *, const void *, size_t);$/;"	m	struct:pcap
inline	pcap-dos.h	52;"	d
inline	pcap-stdinc.h	64;"	d
inter_packet_wait	pcap-int.h	/^        int inter_packet_wait;   \/* offline: wait between packets *\/$/;"	m	struct:pcap
ip	bindrt.h	/^	unsigned char ip[32];$/;"	m	struct:__anon8
ip_addr	main.h	/^	unsigned int ip_addr;\/\/net order.$/;"	m	struct:__anon20
ip_addr	msgque.h	/^	unsigned char ip_addr[MAX_TXT_BUFFER_LEN];$/;"	m	struct:__anon12
ip_deci_dot	main.h	/^	unsigned char ip_deci_dot[32];$/;"	m	struct:__anon20
ip_dst	droute.c	/^        struct  in_addr ip_src,ip_dst;  \/* source and dest address *\/$/;"	m	struct:sniff_ip	typeref:struct:sniff_ip::	file:
ip_id	droute.c	/^        u_short ip_id;                  \/* identification *\/$/;"	m	struct:sniff_ip	file:
ip_len	droute.c	/^        u_short ip_len;                 \/* total length *\/$/;"	m	struct:sniff_ip	file:
ip_off	droute.c	/^        u_short ip_off;                 \/* fragment offset field *\/$/;"	m	struct:sniff_ip	file:
ip_p	droute.c	/^        u_char  ip_p;                   \/* protocol *\/$/;"	m	struct:sniff_ip	file:
ip_src	droute.c	/^        struct  in_addr ip_src,ip_dst;  \/* source and dest address *\/$/;"	m	struct:sniff_ip	typeref:struct:sniff_ip::in_addr	file:
ip_sum	droute.c	/^        u_short ip_sum;                 \/* checksum *\/$/;"	m	struct:sniff_ip	file:
ip_tos	droute.c	/^        u_char  ip_tos;                 \/* type of service *\/$/;"	m	struct:sniff_ip	file:
ip_ttl	droute.c	/^        u_char  ip_ttl;                 \/* time to live *\/$/;"	m	struct:sniff_ip	file:
ip_vhl	droute.c	/^        u_char  ip_vhl;                 \/* version << 4 | header length >> 2 *\/$/;"	m	struct:sniff_ip	file:
ipcMonitorInfo	main.c	/^IPC_MONITOR_INFO ipcMonitorInfo={$/;"	v
ipc_monitor	ipc_monitor.c	/^void *ipc_monitor(void *para)$/;"	f
irq	pcap-dos.h	/^         int    irq;            \/* device IRQ number        *\/$/;"	m	struct:device
irtt	route.c	/^	int irtt;$/;"	m	struct:__anon15	file:
jf	pcap-bpf.h	/^	u_char 	jf;$/;"	m	struct:bpf_insn
jt	pcap-bpf.h	/^	u_char 	jt;$/;"	m	struct:bpf_insn
k	pcap-bpf.h	/^	bpf_int32 k;$/;"	m	struct:bpf_insn
keep_route	route.c	/^inline int keep_route(unsigned char *dst_addr,unsigned char *net_mask,unsigned char *gw,unsigned char *dev_name,unsigned char *host_ip){$/;"	f
key_c2s	bindrt.c	/^static key_t key_c2s,key_s2c; $/;"	v	file:
key_s2c	bindrt.c	/^static key_t key_c2s,key_s2c; $/;"	v	file:
len	pcap-int.h	/^    bpf_u_int32 len;		\/* length this packet (off wire) *\/$/;"	m	struct:pcap_sf_patched_pkthdr
len	pcap-int.h	/^    bpf_u_int32 len;		\/* length this packet (off wire) *\/$/;"	m	struct:pcap_sf_pkthdr
len	pcap.h	/^	bpf_u_int32 len;	\/* length this packet (off wire) *\/$/;"	m	struct:pcap_pkthdr
lengths_swapped	pcap-int.h	/^	swapped_type_t lengths_swapped;$/;"	m	struct:pcap_sf
lib_pcap_h	pcap.h	38;"	d
lib_pcap_namedb_h	pcap-namedb.h	37;"	d
linktype	pcap-int.h	/^	int linktype;$/;"	m	struct:pcap
linktype	pcap.h	/^	bpf_u_int32 linktype;	\/* data link type (LINKTYPE_*) *\/$/;"	m	struct:pcap_file_header
loByte	main.h	/^	unsigned char loByte;$/;"	m	struct:__anon21
loByte	packet_monitor.h	/^	unsigned char loByte;$/;"	m	struct:__anon17
lo_ifindex	pcap-int.h	/^	int	lo_ifindex;	\/* interface index of the loopback device *\/$/;"	m	struct:pcap_md
long_name	pcap-dos.h	/^         const char *long_name;$/;"	m	struct:device
mac	bindrt.h	/^	unsigned char mac[32];$/;"	m	struct:__anon8
mac	main.h	/^	unsigned char mac[6];$/;"	m	struct:__anon20
magic	pcap.h	/^	bpf_u_int32 magic;$/;"	m	struct:pcap_file_header
main	bindrt-test.c	/^int main(int argc, char *argv[]){$/;"	f
main	main.c	/^int main(int argc, char *argv[])$/;"	f
main	test.c	/^int main(int argc,char *argv[]){$/;"	f
main	tmp/client.c	/^int main(int argc,char *argv[]){$/;"	f
main	tmp/server.c	/^int main(int argc,char *argv[]){$/;"	f
mask	route.c	/^	unsigned char mask;$/;"	m	struct:__anon15	file:
max	pcap-dos.h	79;"	d
max	pcap-dos.h	87;"	d
md	pcap-int.h	/^	struct pcap_md md;$/;"	m	struct:pcap	typeref:struct:pcap::pcap_md
mem_end	pcap-dos.h	/^         DWORD  mem_end;        \/* shared mem end           *\/$/;"	m	struct:device
mem_start	pcap-dos.h	/^         DWORD  mem_start;      \/* shared mem start         *\/$/;"	m	struct:device
min	pcap-dos.h	78;"	d
min	pcap-dos.h	83;"	d
min	pcap-int.h	255;"	d
msgid_c2s	bindrt.c	/^static int msgid_c2s=0,msgid_s2c=0; $/;"	v	file:
msgid_s2c	bindrt.c	/^static int msgid_c2s=0,msgid_s2c=0; $/;"	v	file:
msgtype	msgque.h	/^struct msgtype { $/;"	s
mtu	route.c	/^	int mtu;$/;"	m	struct:__anon15	file:
mtype	msgque.h	/^	long mtype;$/;"	m	struct:msgtype
multicast	pcap-dos.h	/^          DWORD  multicast;             \/* multicast packets received   *\/$/;"	m	struct:net_device_stats
multicast	pcap.h	/^       u_long  multicast;         \/* multicast packets received   *\/$/;"	m	struct:pcap_stat_ex
name	main.h	/^	unsigned char name[MAX_ETH_NAME_LEN];$/;"	m	struct:__anon20
name	pcap-dos.h	/^         const char *name;$/;"	m	struct:device
name	pcap-namedb.h	/^	char name[122];$/;"	m	struct:pcap_etherent
name	pcap.h	/^	char *name;		\/* name to hand to "pcap_open_live()" *\/$/;"	m	struct:pcap_if
netDevNameInfo	bindrt.c	/^NET_DEV_NAME_RET_INFO netDevNameInfo[]={$/;"	v
net_dev_name_map_list	msgque.h	/^	DEV_MAP_NODE net_dev_name_map_list[3];\/\/max 3 vlan .$/;"	m	struct:__anon14
net_device_stats	pcap-dos.h	/^  typedef struct net_device_stats {$/;"	s
net_mask	msgque.h	/^	unsigned char net_mask[MAX_TXT_BUFFER_LEN];$/;"	m	struct:__anon12
netmask	bindrt.h	/^	unsigned char netmask[32];$/;"	m	struct:__anon8
netmask	main.h	/^	unsigned char netmask[32];$/;"	m	struct:__anon20
netmask	pcap.h	/^	struct sockaddr *netmask;	\/* netmask for that address *\/$/;"	m	struct:pcap_addr	typeref:struct:pcap_addr::sockaddr
newDevName	bindrt.h	/^	unsigned char newDevName[32];$/;"	m	struct:__anon7
newDevName	msgque.h	/^	unsigned char newDevName[32];$/;"	m	struct:__anon13
next	pcap-dos.h	/^         struct device *next;   \/* next device in list      *\/$/;"	m	struct:device	typeref:struct:device::device
next	pcap-int.h	/^	struct pcap *next;	\/* list of open promiscuous sock_packet pcaps *\/$/;"	m	struct:pcap_md	typeref:struct:pcap_md::pcap
next	pcap.h	/^	struct pcap_addr *next;$/;"	m	struct:pcap_addr	typeref:struct:pcap_addr::pcap_addr
next	pcap.h	/^	struct pcap_if *next;$/;"	m	struct:pcap_if	typeref:struct:pcap_if::pcap_if
nonblock	pcap-int.h	/^	int nonblock;$/;"	m	struct:pcap
num_elem	pcap-dos.h	/^         int          num_elem;   \/* number of elements *\/$/;"	m	struct:rx_ringbuf
offset	pcap-int.h	/^	int offset;		\/* offset for proper alignment *\/$/;"	m	struct:pcap
open	pcap-dos.h	/^         int   (*open) (struct device *dev);$/;"	m	struct:device
open_route_file	route.c	/^int open_route_file()$/;"	f
order	main.h	/^	int order;$/;"	m	struct:__anon20
orgDevName	bindrt.h	/^	unsigned char orgDevName[32];$/;"	m	struct:__anon7
orgDevName	msgque.h	/^	unsigned char orgDevName[32];$/;"	m	struct:__anon13
out_index	pcap-dos.h	/^         int          out_index;  \/* queue index tail *\/$/;"	m	struct:rx_ringbuf
packet_monitor	packet_monitor.c	/^void *packet_monitor(void *para){$/;"	f
parse	main.h	/^	int (*parse)(unsigned char *buf,int len,int vlan_len,unsigned int ip_addr,unsigned char *dev_name,unsigned char *result);$/;"	m	struct:__anon21
parse_arp	arp.c	/^int parse_arp(unsigned char *buf,int len,int vlan_len,unsigned int ip_addr,unsigned char *dev_name,unsigned char *result){$/;"	f
parse_ip	ip.c	/^int parse_ip(unsigned char *buf,int len,int vlan_len,unsigned int ip_addr,unsigned char *dev_name,unsigned char *result){$/;"	f
pcap	main.h	/^	void *pcap;$/;"	m	struct:__anon20
pcap	pcap-int.h	/^struct pcap {$/;"	s
pcap_addr	pcap.h	/^struct pcap_addr {$/;"	s
pcap_addr_t	pcap.h	/^typedef struct pcap_addr pcap_addr_t;$/;"	t	typeref:struct:pcap_addr
pcap_direction_t	pcap.h	/^} pcap_direction_t;$/;"	t	typeref:enum:__anon9
pcap_dumper_t	pcap.h	/^typedef struct pcap_dumper pcap_dumper_t;$/;"	t	typeref:struct:pcap_dumper
pcap_etherent	pcap-namedb.h	/^struct pcap_etherent {$/;"	s
pcap_file_header	pcap.h	/^struct pcap_file_header {$/;"	s
pcap_handler	pcap.h	/^typedef void (*pcap_handler)(u_char *, const struct pcap_pkthdr *,$/;"	t
pcap_header	pcap-int.h	/^	struct pcap_pkthdr pcap_header;	\/* This is needed for the pcap_next_ex() to work *\/$/;"	m	struct:pcap	typeref:struct:pcap::pcap_pkthdr
pcap_if	pcap.h	/^struct pcap_if {$/;"	s
pcap_if_t	pcap.h	/^typedef struct pcap_if pcap_if_t;$/;"	t	typeref:struct:pcap_if
pcap_int_h	pcap-int.h	37;"	d
pcap_md	pcap-int.h	/^struct pcap_md {$/;"	s
pcap_pkthdr	pcap.h	/^struct pcap_pkthdr {$/;"	s
pcap_sf	pcap-int.h	/^struct pcap_sf {$/;"	s
pcap_sf_patched_pkthdr	pcap-int.h	/^struct pcap_sf_patched_pkthdr {$/;"	s
pcap_sf_pkthdr	pcap-int.h	/^struct pcap_sf_pkthdr {$/;"	s
pcap_stat	pcap.h	/^struct pcap_stat {$/;"	s
pcap_stat_ex	pcap.h	/^struct pcap_stat_ex {$/;"	s
pcap_t	pcap.h	/^typedef struct pcap pcap_t;$/;"	t	typeref:struct:pcap
pcap_timeval	pcap-int.h	/^struct pcap_timeval {$/;"	s
peek_rx_buf	pcap-dos.h	/^         int   (*peek_rx_buf) (BYTE **buf);         \/* rx-non-copy at queue *\/$/;"	m	struct:device
pkt	pcap-int.h	/^	u_char *pkt;$/;"	m	struct:pcap
pkt_type	pcap-int.h	/^    unsigned char pkt_type;$/;"	m	struct:pcap_sf_patched_pkthdr
print_buf	pub.c	/^void print_buf(unsigned char *buf,int size,int col){$/;"	f
priv	pcap-dos.h	/^         void  *priv;           \/* private data *\/$/;"	m	struct:device
probe	pcap-dos.h	/^         int   (*probe)(struct device *dev);$/;"	m	struct:device
proto_ops	main.c	/^PROTO_OPS proto_ops[2]={$/;"	v
protocol	pcap-int.h	/^    unsigned short protocol;$/;"	m	struct:pcap_sf_patched_pkthdr
ps_drop	pcap.h	/^	u_int ps_drop;		\/* number of packets dropped *\/$/;"	m	struct:pcap_stat
ps_ifdrop	pcap.h	/^	u_int ps_ifdrop;	\/* drops by interface XXX not yet supported *\/$/;"	m	struct:pcap_stat
ps_recv	pcap.h	/^	u_int ps_recv;		\/* number of packets received *\/$/;"	m	struct:pcap_stat
read_op	pcap-int.h	/^	int	(*read_op)(pcap_t *, int cnt, pcap_handler, u_char *);$/;"	m	struct:pcap
refCnt	route.c	/^	unsigned char refCnt;$/;"	m	struct:__anon15	file:
release_rx_buf	pcap-dos.h	/^         int   (*release_rx_buf) (BYTE *buf);       \/* release after peek *\/$/;"	m	struct:device
rfile	pcap-int.h	/^	FILE *rfile;$/;"	m	struct:pcap_sf
rmem_end	pcap-dos.h	/^         DWORD  rmem_end;       \/* shared "recv" end        *\/$/;"	m	struct:device
rmem_start	pcap-dos.h	/^         DWORD  rmem_start;     \/* shmem "recv" start       *\/$/;"	m	struct:device
routeBuf	route.c	/^static unsigned char routeBuf[ROUTE_BUF_SIZE+1];$/;"	v	file:
routeFile	route.c	/^static FILE *routeFile=NULL;$/;"	v	file:
routecheck	droute.c	/^int routecheck(char * hostip, char * interface)$/;"	f
rt_table_mutex	route.c	/^static pthread_mutex_t rt_table_mutex=PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
rx_bytes	pcap-dos.h	/^          DWORD  rx_bytes;              \/* total bytes received         *\/$/;"	m	struct:net_device_stats
rx_bytes	pcap.h	/^       u_long  rx_bytes;          \/* total bytes received         *\/$/;"	m	struct:pcap_stat_ex
rx_crc_errors	pcap-dos.h	/^          DWORD  rx_crc_errors;         \/* recv'd pkt with crc error    *\/$/;"	m	struct:net_device_stats
rx_crc_errors	pcap.h	/^       u_long  rx_crc_errors;     \/* recv'd pkt with crc error    *\/$/;"	m	struct:pcap_stat_ex
rx_dropped	pcap-dos.h	/^          DWORD  rx_dropped;            \/* no space in Rx buffers       *\/$/;"	m	struct:net_device_stats
rx_dropped	pcap.h	/^       u_long  rx_dropped;        \/* no space in Rx buffers       *\/$/;"	m	struct:pcap_stat_ex
rx_elem	pcap-dos.h	/^  struct rx_elem {$/;"	s
rx_errors	pcap-dos.h	/^          DWORD  rx_errors;             \/* bad packets received         *\/$/;"	m	struct:net_device_stats
rx_errors	pcap.h	/^       u_long  rx_errors;         \/* bad packets received         *\/$/;"	m	struct:pcap_stat_ex
rx_fifo_errors	pcap-dos.h	/^          DWORD  rx_fifo_errors;        \/* recv'r fifo overrun          *\/$/;"	m	struct:net_device_stats
rx_fifo_errors	pcap.h	/^       u_long  rx_fifo_errors;    \/* recv'r fifo overrun          *\/$/;"	m	struct:pcap_stat_ex
rx_frame_errors	pcap-dos.h	/^          DWORD  rx_frame_errors;       \/* recv'd frame alignment error *\/$/;"	m	struct:net_device_stats
rx_frame_errors	pcap.h	/^       u_long  rx_frame_errors;   \/* recv'd frame alignment error *\/$/;"	m	struct:pcap_stat_ex
rx_length_errors	pcap-dos.h	/^          DWORD  rx_length_errors;$/;"	m	struct:net_device_stats
rx_length_errors	pcap.h	/^       u_long  rx_length_errors;$/;"	m	struct:pcap_stat_ex
rx_missed_errors	pcap-dos.h	/^          DWORD  rx_missed_errors;      \/* recv'r missed packet         *\/$/;"	m	struct:net_device_stats
rx_missed_errors	pcap.h	/^       u_long  rx_missed_errors;  \/* recv'r missed packet         *\/$/;"	m	struct:pcap_stat_ex
rx_osize_errors	pcap-dos.h	/^          DWORD  rx_osize_errors;       \/* recv'r over-size error       *\/$/;"	m	struct:net_device_stats
rx_over_errors	pcap-dos.h	/^          DWORD  rx_over_errors;        \/* recv'r overrun error         *\/$/;"	m	struct:net_device_stats
rx_over_errors	pcap.h	/^       u_long  rx_over_errors;    \/* receiver ring buff overflow  *\/$/;"	m	struct:pcap_stat_ex
rx_packets	pcap-dos.h	/^          DWORD  rx_packets;            \/* total packets received       *\/$/;"	m	struct:net_device_stats
rx_packets	pcap.h	/^       u_long  rx_packets;        \/* total packets received       *\/$/;"	m	struct:pcap_stat_ex
rx_ringbuf	pcap-dos.h	/^  struct rx_ringbuf {$/;"	s
scan_net_dev_name	scan_dev_name.c	/^void *scan_net_dev_name(void *para){$/;"	f
set_datalink_op	pcap-int.h	/^	int	(*set_datalink_op)(pcap_t *, int);$/;"	m	struct:pcap
set_gateway	bindrt-test.c	/^int set_gateway(unsigned char *argv[]){$/;"	f
set_multicast_list	pcap-dos.h	/^         void  (*set_multicast_list)(struct device *dev);$/;"	m	struct:device
set_vlan_device	bindrt-test.c	/^int set_vlan_device(unsigned char *argv[]){$/;"	f
setdirection_op	pcap-int.h	/^	int	(*setdirection_op)(pcap_t *, pcap_direction_t);$/;"	m	struct:pcap
setfilter_op	pcap-int.h	/^	int	(*setfilter_op)(pcap_t *, struct bpf_program *);$/;"	m	struct:pcap
setnonblock_op	pcap-int.h	/^	int	(*setnonblock_op)(pcap_t *, int, char *);$/;"	m	struct:pcap
sf	pcap-int.h	/^	struct pcap_sf sf;$/;"	m	struct:pcap	typeref:struct:pcap::pcap_sf
shift_vlan_buf	packet_monitor.c	/^inline static void shift_vlan_buf(unsigned char *p,int *len){$/;"	f	file:
sigfigs	pcap.h	/^	bpf_u_int32 sigfigs;	\/* accuracy of timestamps *\/$/;"	m	struct:pcap_file_header
size	pcap-dos.h	/^         DWORD size;              \/* size copied to this element *\/$/;"	m	struct:rx_elem
snaplen	pcap.h	/^	bpf_u_int32 snaplen;	\/* max length saved portion of each pkt *\/$/;"	m	struct:pcap_file_header
snapshot	pcap-int.h	/^	int snapshot;$/;"	m	struct:pcap
sniff_ethernet	droute.c	/^struct sniff_ethernet {$/;"	s	file:
sniff_ip	droute.c	/^struct sniff_ip {$/;"	s	file:
snprintf	pcap-int.h	272;"	d
snprintf	pcap-stdinc.h	62;"	d
sock	main.h	/^	int sock;$/;"	m	struct:__anon20
sock_packet	pcap-int.h	/^	int	sock_packet;	\/* using Linux 2.0 compatible interface *\/$/;"	m	struct:pcap_md
softupdate_udp_port	ip.c	/^unsigned char softupdate_udp_port[]={0x2b,0x5c};$/;"	v
stat	pcap-int.h	/^	struct pcap_stat stat;$/;"	m	struct:pcap_md	typeref:struct:pcap_md::pcap_stat
stats_op	pcap-int.h	/^	int	(*stats_op)(pcap_t *, struct pcap_stat *);$/;"	m	struct:pcap
status	bindrt.h	/^	unsigned char status[32];$/;"	m	struct:__anon8
status	main.h	/^	volatile STATUS_INFO status;$/;"	m	struct:__anon20
status	main.h	/^	volatile STATUS_INFO status;$/;"	m	struct:__anon22
status	msgque.h	/^	unsigned char status[MAX_DEV_NAME_LEN];$/;"	m	struct:__anon12
status	msgque.h	/^	unsigned char status[MAX_DEV_NAME_LEN];$/;"	m	struct:__anon14
strlcpy	pcap-int.h	263;"	d
swapped	pcap-int.h	/^	int swapped;$/;"	m	struct:pcap_sf
swapped_type_t	pcap-int.h	/^} swapped_type_t;$/;"	t	typeref:enum:__anon16
thiszone	pcap.h	/^	bpf_int32 thiszone;	\/* gmt to local correction *\/$/;"	m	struct:pcap_file_header
timeout	pcap-int.h	/^	int	timeout;	\/* timeout specified to pcap_open_live *\/$/;"	m	struct:pcap_md
timeout	pcap-int.h	/^	int timeout;$/;"	m	struct:pcap
ts	pcap-int.h	/^    struct pcap_timeval ts;	\/* time stamp *\/$/;"	m	struct:pcap_sf_patched_pkthdr	typeref:struct:pcap_sf_patched_pkthdr::pcap_timeval
ts	pcap-int.h	/^    struct pcap_timeval ts;	\/* time stamp *\/$/;"	m	struct:pcap_sf_pkthdr	typeref:struct:pcap_sf_pkthdr::pcap_timeval
ts	pcap.h	/^	struct timeval ts;	\/* time stamp *\/$/;"	m	struct:pcap_pkthdr	typeref:struct:pcap_pkthdr::timeval
tv_sec	pcap-int.h	/^    bpf_int32 tv_sec;		\/* seconds *\/$/;"	m	struct:pcap_timeval
tv_usec	pcap-int.h	/^    bpf_int32 tv_usec;		\/* microseconds *\/$/;"	m	struct:pcap_timeval
tx_aborted_errors	pcap-dos.h	/^          DWORD  tx_aborted_errors;$/;"	m	struct:net_device_stats
tx_aborted_errors	pcap.h	/^       u_long  tx_aborted_errors;$/;"	m	struct:pcap_stat_ex
tx_bytes	pcap-dos.h	/^          DWORD  tx_bytes;              \/* total bytes transmitted      *\/$/;"	m	struct:net_device_stats
tx_bytes	pcap.h	/^       u_long  tx_bytes;          \/* total bytes transmitted      *\/$/;"	m	struct:pcap_stat_ex
tx_carrier_errors	pcap-dos.h	/^          DWORD  tx_carrier_errors;$/;"	m	struct:net_device_stats
tx_carrier_errors	pcap.h	/^       u_long  tx_carrier_errors;$/;"	m	struct:pcap_stat_ex
tx_collisions	pcap-dos.h	/^          DWORD  tx_collisions;$/;"	m	struct:net_device_stats
tx_dropped	pcap-dos.h	/^          DWORD  tx_dropped;            \/* no space available for Tx    *\/$/;"	m	struct:net_device_stats
tx_dropped	pcap.h	/^       u_long  tx_dropped;        \/* no space available for Tx    *\/$/;"	m	struct:pcap_stat_ex
tx_errors	pcap-dos.h	/^          DWORD  tx_errors;             \/* packet transmit problems     *\/$/;"	m	struct:net_device_stats
tx_errors	pcap.h	/^       u_long  tx_errors;         \/* packet transmit problems     *\/$/;"	m	struct:pcap_stat_ex
tx_fifo_errors	pcap-dos.h	/^          DWORD  tx_fifo_errors;$/;"	m	struct:net_device_stats
tx_fifo_errors	pcap.h	/^       u_long  tx_fifo_errors;$/;"	m	struct:pcap_stat_ex
tx_heartbeat_errors	pcap-dos.h	/^          DWORD  tx_heartbeat_errors;$/;"	m	struct:net_device_stats
tx_heartbeat_errors	pcap.h	/^       u_long  tx_heartbeat_errors;$/;"	m	struct:pcap_stat_ex
tx_jabbers	pcap-dos.h	/^          DWORD  tx_jabbers;$/;"	m	struct:net_device_stats
tx_packets	pcap-dos.h	/^          DWORD  tx_packets;            \/* total packets transmitted    *\/$/;"	m	struct:net_device_stats
tx_packets	pcap.h	/^       u_long  tx_packets;        \/* total packets transmitted    *\/$/;"	m	struct:pcap_stat_ex
tx_window_errors	pcap-dos.h	/^          DWORD  tx_window_errors;$/;"	m	struct:net_device_stats
tx_window_errors	pcap.h	/^       u_long  tx_window_errors;$/;"	m	struct:pcap_stat_ex
tzoff	pcap-int.h	/^	int tzoff;		\/* timezone offset *\/$/;"	m	struct:pcap
uint64	pcap-dos.h	/^  typedef unsigned __int64  uint64;$/;"	t
uint64	pcap-dos.h	/^  typedef unsigned long long  uint64;$/;"	t
update	main.h	/^	volatile int update;$/;"	m	struct:__anon20
usage	bindrt-test.c	/^void usage(unsigned char *process){$/;"	f
use	route.c	/^	unsigned char use;$/;"	m	struct:__anon15	file:
use_bpf	pcap-int.h	/^	int use_bpf;		\/* using kernel filter *\/$/;"	m	struct:pcap_md
v100p_bind_route	bindrt.c	/^BIND_RET_INFO v100p_bind_route(unsigned char *dst_addr,unsigned char *net_mask,unsigned char *gw,unsigned char *dev_name){$/;"	f
v100p_net_name_map	bindrt.c	/^NET_DEV_NAME_RET_INFO v100p_net_name_map(NET_DEV_NAME_MAP_NODE *list,int counts){$/;"	f
v100p_set_net_info	bindrt.c	/^NET_DEV_INFO_RET_INFO v100p_set_net_info(DEV_NET_INFO *devNetInfoPtr){$/;"	f
val	bindrt.h	/^	BIND_RT_REVALUE val;$/;"	m	struct:__anon2
val	bindrt.h	/^	NET_DEV_INFO_RE_VALUE val;$/;"	m	struct:__anon6
val	bindrt.h	/^	NET_DEV_NAME_RE_VALUE val;$/;"	m	struct:__anon4
version_major	pcap-int.h	/^	int version_major;$/;"	m	struct:pcap_sf
version_major	pcap.h	/^	u_short version_major;$/;"	m	struct:pcap_file_header
version_minor	pcap-int.h	/^	int version_minor;$/;"	m	struct:pcap_sf
version_minor	pcap.h	/^	u_short version_minor;$/;"	m	struct:pcap_file_header
vlan	packet_monitor.c	/^PROTO_TYPE_II vlan={0x81,0x00};$/;"	v
vsnprintf	pcap-int.h	277;"	d
vsnprintf	pcap-stdinc.h	63;"	d
wait_proc	pcap-int.h	/^        void (*wait_proc)(void); \/*          call proc while waiting *\/$/;"	m	struct:pcap
window	route.c	/^	int window;$/;"	m	struct:__anon15	file:
work	bindrt.h	/^	char work;\/\/ 0,sleep ,1 work.$/;"	m	struct:__anon8
work	main.h	/^	char work;\/\/0,sleep,1 work.$/;"	m	struct:__anon20
xmit	pcap-dos.h	/^         int   (*xmit) (struct device *dev, const void *buf, int len);$/;"	m	struct:device
